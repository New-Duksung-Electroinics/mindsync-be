name: Deploy to Ubuntu Server using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: kanepark/app
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_SSH_USER: ${{ secrets.SERVER_SSH_USER }}
  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  MONGO_HOST: ${{ secrets.MONGO_HOST }}
  MONGO_PORT: ${{ secrets.MONGO_PORT }}
  MONGO_DB: ${{ secrets.MONGO_DB }}
  MONGO_USER: ${{ secrets.MONGO_USER }}
  MONGO_PASS: ${{ secrets.MONGO_PASS }}
  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --info

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push the Docker image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  # deploy-to-ubuntu-server:
  #   needs: build-and-push-docker
  #   runs-on: ubuntu-latest
  
  #   steps:
  #     - name: Deploy to Ubuntu Server
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ env.SERVER_HOST }}
  #         username: ${{ env.SERVER_SSH_USER }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         port: 234
  #         script: |
  #           LOG_DIR="/home/ubuntu/app-logs"
  #           mkdir -p $LOG_DIR
  #           touch $LOG_DIR/app.log

  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker container prune -f
  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker image prune -af
  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker volume prune -f
  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker system prune -af --volumes

  #           CONTAINER_ID=$(sudo docker ps -q --filter "publish=10")

  #           if [ ! -z "$CONTAINER_ID" ]; then
  #             echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker stop $CONTAINER_ID
  #             echo "컨테이너 종료 대기 중..."
  #             while true; do
  #               CONTAINER_STATUS=$(sudo docker inspect --format '{{.State.Status}}' $CONTAINER_ID)
  #               if [ "$CONTAINER_STATUS" == "exited" ]; then
  #                 echo "컨테이너 종료 완료"
  #                 break
  #               fi
  #               sleep 1
  #             done
  #           fi

  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest

  #           echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S docker run --name mindsync-be-container -d -p 10:8080 \
  #             -e TZ=Asia/Seoul \
  #             -e MONGO_HOST=172.17.0.1 \
  #             -e MONGO_PORT=27017 \
  #             -e MONGO_DB=mindsync-fe \
  #             -e MONGO_USER=admin \
  #             -e MONGO_PASS=admin \
  #             -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
  #             -v $LOG_DIR/app.log:/app/logs/app.log \
  #             ${{ env.DOCKER_IMAGE_NAME }}:latest
